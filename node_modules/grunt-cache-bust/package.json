{
  "name": "grunt-cache-bust",
  "description": "Bust static assets from the cache using content hashing",
  "version": "0.4.13",
  "author": {
    "name": "Ben Holland",
    "email": "hi@benholland.me"
  },
  "repository": {
    "type": "git",
    "url": "git://github.com/hollandben/grunt-cache-bust.git"
  },
  "licenses": [
    {
      "type": "MIT",
      "url": "https://github.com/hollandben/grunt-cache-bust/blob/master/LICENSE-MIT"
    }
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "scripts": {
    "test": "grunt test"
  },
  "devDependencies": {
    "grunt-contrib-clean": "~0.6.0",
    "grunt-contrib-copy": "~0.8.0",
    "grunt-contrib-jshint": "~0.11.0",
    "grunt-contrib-nodeunit": "~0.4.1",
    "grunt-contrib-watch": "~0.6.1"
  },
  "peerDependencies": {
    "grunt": "~0.4.5"
  },
  "dependencies": {
    "cheerio": "~0.18.0",
    "css": "~2.2.0",
    "flatten": "~0.0.1"
  },
  "keywords": [
    "grunt",
    "grunt plugin",
    "cache",
    "bust",
    "bust assets"
  ],
  "readme": "# grunt-cache-bust\n\n[![npm version](https://badge.fury.io/js/grunt-cache-bust.svg)](http://badge.fury.io/js/grunt-cache-bust)\n[![Build Status](https://travis-ci.org/hollandben/grunt-cache-bust.png?branch=master)](https://travis-ci.org/hollandben/grunt-cache-bust)\n[![Dependencies](https://david-dm.org/hollandben/grunt-cache-bust.svg)](https://david-dm.org/hollandben/grunt-cache-bust.svg)\n[![devDependency Status](https://david-dm.org/alanshaw/david/dev-status.svg?style=flat)](https://david-dm.org/alanshaw/david#info=devDependencies)\n\n> Bust static assets from the cache using content hashing\n\n* [Getting Started](#getting-started)\n* [Introduction](#the-cachebust-task)\n* [Overview](#overview)\n* [Options](#options)\n* [Usage Examples](#usage-examples)\n* [CDNs](#cdns)\n* [Change Log](#change-log)\n\n## Getting Started\n_If you haven't used [grunt][] before, be sure to check out the [Getting Started][] guide._\n\nFrom the same directory as your project's [Gruntfile][Getting Started] and [package.json][], install this plugin with the following command:\n\n```bash\nnpm install grunt-cache-bust --save-dev\n```\n\n[grunt]: http://gruntjs.com/\n[Getting Started]: https://github.com/gruntjs/grunt/blob/devel/docs/getting_started.md\n[package.json]: https://npmjs.org/doc/json.html\n\n## The \"cacheBust\" task\n\nUse the `cacheBust` task for cache busting static files in your application. This allows the assets to have a large expiry time in the browsers cache and will only be forced to use an updated file when the contents of it changes. This is a good practice.\n\nGive the `cacheBust` a list of files that contain your resources and let it work it's magic.\n\n__By \ndefault, it will bust the following file type: **CSS**, **JavaScript**, **images** and **favicons**_\n__You can manually add more if needed__\n\n### Overview\nIn your project's Gruntfile, add a section named `cacheBust` to the data object passed into `grunt.initConfig()`.\n\n```js\ngrunt.initConfig({\n  cacheBust: {\n    options: {\n      encoding: 'utf8',\n      algorithm: 'md5',\n      length: 16,\n      deleteOriginals: true\n    },\n    assets: {\n      files: [{\n        src: ['index.html']\n      }]\n    }\n  }\n})\n```\n\n```html\n<!doctype html>\n<html>\n<head>\n    <title>This is a test page</title>\n    <link rel=\"stylesheet\" href=\"/assets/standard.css\" />\n</head>\n<body>\n    <img src=\"/assets/standard.jpg\" alt=\"bird\">\n    <script defer src=\"/assets/standard.js\" type=\"text/javascript\"></script>\n</body>\n</html>\n```\n\n### Options\n\n#### Summary\n\n```\n// Here is a short summary of the options and some of their \ndefaults. Extra details are below.\n{\n    algorithm: 'md5',                    // Algoirthm used for hashing files\n    baseDir: './',                       // The base directory for all assets\n    cdnPath: false,                      // You're own CDN path\n    deleteOriginals: false,              // Delete the original file after hashing\n    enableUrlFragmentHint: false,        // Look for the URL fragment in URLs\n    encoding: 'utf8',                    // The encoding used when reading/writing files\n    filters: {},                         // Filters used when searching the DOM for assets\n    ignorePatterns: [],                  // Ignore files that match given patterns\n    jsonOutput: false,                   // Output the original => new URLs to a JSON file\n    length: 16,                          // The length of the hash from a file\n    replaceTerms: [],                    // Replace terms in URLs\n    removeUrlFragmentHint: false,        // Remove the URL fragment from URLs after hashing\n    rename: true,                        // Rename files instead of appending a query string\n    separator: '.'                       // The separator between the original file name and hash\n}\n```\n\n#### options.algorithm\nType: `String`\n\nDefault value: `'md5'`\n\n`algorithm` is dependent on the available algorithms supported by the version of OpenSSL on the platform. Examples are `'sha1'`, `'md5'`, `'sha256'`, `'sha512'`\n\n#### options.baseDir\nType: `String`\n\nDefault value: `false`\n\nWhen set, `cachebust` will try to find the asset files using the baseDir as base path.\n\nYou can override this at the file level, e.g:\n\n```js\nassets: {\n  files: [\n      {   \n        expand: true,\n        cwd: 'public/',\n        baseDir: 'public/',\n        src: ['modules/**/*.html']\n      },  \n      {   \n        baseDir: '/',\n        src: ['config/config.js']\n      }   \n  ]   \n}   \n```\n\n#### options.cdnPath\nType: `String`\n\nDefault value: `false`\n\nWhen set, `cachebust` test paths against this string when attempting to determine a path to be remote or not. This allows all assets to be busted locally and than uploaded to your own CDN. This string will be ignored in paths during file-handling to find files in `baseDir`.\n\n#### options.deleteOriginals\nType: `Boolean`\n\nDefault value: `false`\n\nWhen set, `cachebust` will delete the original versions of the files that have been renamed.  For example, `style.css` will be deleted after being copied to `style.dcf1d324cb50a1f9.css`.\n\n#### options.enableUrlFragmentHint\n\nType: `Boolean`\n\nDefault value: `false`\n\nWhen true, cachebust will search single and double-quoted strings in the given files for any resource ending in `#grunt-cache-bust`. See [an example](https://github.com/hollandben/grunt-cache-bust/blob/master/test/fixtures/enableUrlFragmentHint.php) for more details.\n\n#### options.encoding\nType: `String`\n\nDefault value: `'utf8'`\n\nThe encoding of the file contents.\n\n#### options.filters\nType : `Object`\n\nDefault value:\n```js\n{\n    'SELECTOR' : function() { return this.attribs['ATTR']; }\n}\n```\n\nThe key in the object is the `selector`, and the value provided is the filter. Filters will be merged with the \ndefaults above. See [an example](https://github.com/hollandben/grunt-cache-bust/blob/master/tasks/cachebust.js#L39) for more details.\n\n#### options.ignorePatterns\nType: `Array`\n\nDefault value: `[]`\n\nThis is a regex test against a file reference. If returned true for patterns in the array, then that file will be ignored.\n\n```js\nignorePatterns: ['test', 'requirejs']\n```\n\n#### options.jsonOutput\nType: `Boolean|String`\n\nDefault value: `false`\n\nWhen set as `true`, `cachbust` will create a json file with an object inside that contains key value pairs of the original file name, and the renamed md5 hash name for each file.\n\nThe default output file will be named `grunt-cache-bust.json` and is relative to the root of the project, or the `baseDir` option if set.\n\nAlternatively, you can set this option as a string i.e. `example-file-name.json`, and this will be used.\n\nOutput format looks like this:\n```\n{\n  '/scripts/app.js' : '/scripts/app.23e6f7ac5623e96f.js',\n  '/scripts/vendor.js': '/scripts/vendor.h421fwaj124bfaf5.js'\n}\n```\n\n#### options.length\nType: `Number`\n\nDefault value: `16`\n\nThe number of characters of the file content hash to prefix the file name with.\n\n#### options.replaceTerms\nType: `Array`\n\nDefault value: `[]`\n\nReplace terms within URLs. See the `replaceTerm` folder in `tests`.\n\n#### options.removeUrlFragmentHint\n\nType: `Boolean`\n\nDefault value: `false`\n\nRemoves the URL fragment after it's been processed.\n\n#### options.rename\nType: `Boolean`\n\nDefault value: `true`\n\nWhen true, `cachebust` will rename the reference to the file and the file itself with the generated hash. When set to false, then a query string parameter is added to the end of the file reference.\n\n#### options.separator\nType: `String`\n\nDefault value: `.`\n\nThe separator between the original file name and hash\n\n### Usage Examples\n\n#### Basic Asset Cache Busting\n\n```js\ngrunt.initConfig({\n  cacheBust: {\n    assets: {\n      files: {\n        src: ['index.html', 'contact.html']\n      }\n    }\n  }\n});\n```\n\n#### Custom Options\n\n```js\ngrunt.initConfig({\n  cacheBust: {\n    options: {\n      algorithm: 'sha1',\n      length: 32,\n      baseDir: '.tmp/public/',\n      filters: {\n        'script': [\n          function() {\n            return this.attribs['data-main'];\n          }, // for requirejs mains.js\n          function() {\n            return this.attribs.src;\n          } // keep \n          default 'src' mapper\n        ]\n      }\n    },\n    assets: {\n      files: [{\n        expand: true,\n        cwd: 'src',\n        src: ['*.html'],\n        dest: 'dest/'\n      }]\n    }\n  }\n});\n```\n\n### CDNs\n\nRemote URLs for CSS, JavaScript, and images are ignored by cacheBust. This assumes that remote URLs for these assets will be CDN hosted content, typically for well known libraries like jQuery or Bootstrap. For example, all these URLs will be ignored:\n\n```html\n<link href=\"//netdna.bootstrapcdn.com/twitter-bootstrap/2.3.2/css/bootstrap-combined.min.css\" rel=\"stylesheet\">\n<link href=\"http://twitter.github.com/bootstrap/assets/css/bootstrap.css\" rel=\"stylesheet\">\n<script src=\"//ajax.googleapis.com/ajax/libs/angularjs/1.0.6/angular.min.js\"></script>\n<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/1.10.2/jquery.min.js\"></script>\n<script type=\"text/javascript\" src=\"http://code.jquery.com/qunit/qunit-1.12.0.js\"></script>\n<img src=\"https://secure.gravatar.com/avatar/d3b2094f1b3386e660bb737e797f5dcc?s=420\" alt=\"test\" />\n```\n\n### Change Log\n\n**v0.4.13** - 2015-02-27\n* Fixes issue with deleting the original files when referenced in more than one source file.\n* Fixed issue with hashe in the url of assets when referenced in CSS\n\n**v0.4.12** - 2015-02-26 \n* Fixed tests and implementation when deleting original files.\n\n**v0.4.12** - 2015-02-25\n* Ignoring data-images when parsing CSS.\n\n**v0.4.12** - 2015-02-20\n* Added support for Windows 8.1 and IE titles browser config file.\n\n**v0.4.2** - 2015-02-19\n* Tidied up tests. Improved README readability.\n\n**v0.4.2** - 2015-02-18\n* Improved detection of remote resources\n\n**v0.4.2** - 2015-02-18\n* Fix for working with relative paths\n\n**v0.4.2** - 2015-02-15\n* Added options to remove frag hints and use a local CDN. Busting multiple values in CSS files. Bust SVG xlink:href path. Override `baseDir` on a per file basis.\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/hollandben/grunt-cache-bust/issues"
  },
  "homepage": "https://github.com/hollandben/grunt-cache-bust",
  "_id": "grunt-cache-bust@0.4.13",
  "dist": {
    "shasum": "89ef3df2f8256bae5bcbc10969f22920ceac930a"
  },
  "_from": "grunt-cache-bust@~0.4.13",
  "_resolved": "https://registry.npmjs.org/grunt-cache-bust/-/grunt-cache-bust-0.4.13.tgz"
}
